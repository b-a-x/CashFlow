<h4>Расходы</h4>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Добавить" Click="@InsertRowExpense" />
<RadzenGrid @ref="expensesGrid" AllowFiltering="false" AllowPaging="true" PageSize="4" AllowSorting="true" EditMode="DataGridEditMode.Single"
            Data="@expenses" TItem="Expense" RowUpdate="@OnUpdateRowExpense" RowCreate="@OnCreateRowExpense">
    <Columns>
        <RadzenGridColumn Width="100px" TItem="Expense" Property="Id" Title="Id" />
        <RadzenGridColumn Width="200px" TItem="Expense" Property="Name" Title="Название">
            <EditTemplate Context="expense">
                <RadzenTextBox @bind-Value="expense.Name" Style="width:100%; display: block" Name="Название" />
                <RadzenRequiredValidator Text="Обязательно к заполнению" Component="Название" Popup="true" />
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Width="100px" TItem="Expense" Property="Price" Title="Цена">
            <Template Context="expense">
                @string.Format(new System.Globalization.CultureInfo("ru-RU"), "{0:C}", expense.Price)
            </Template>
            <FooterTemplate>
                <b>@string.Format(new System.Globalization.CultureInfo("ru-RU"), "{0:C}", expenses.Sum(o => o.Price))</b>
            </FooterTemplate>
            <EditTemplate Context="expense">
                <RadzenNumeric @bind-Value="expense.Price" Style="width:100%" />
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Width="100px" TItem="Expense" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="expense">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRowExpense(expense))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="expense">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRowExpense(expense))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEditExpense(expense))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Expense" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="expense">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRowExpense(expense))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="expense">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRowExpense(expense))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

@code {
    public class Expense
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public float Price { get; set; }
    }
    private RadzenGrid<Expense> expensesGrid;
    private List<Expense> expenses = new List<Expense>
    {
        new Expense{Id = 1, Name = "Test1", Price = 5421},
        new Expense{Id = 2, Name = "Test2", Price = 13465},
        new Expense{Id = 3, Name = "Test3", Price = 12545},
        new Expense{Id = 4, Name = "Test4", Price = 135465},
        new Expense{Id = 5, Name = "Test5", Price = 135457},
        new Expense{Id = 6, Name = "Test6", Price = 1354687},
    };

    private void InsertRowExpense()
    {
        var expense = new Expense();
        var id = (expenses.OrderByDescending(x => x.Id).First()?.Id ?? 0) + 1;
        expense.Id = id;
        expensesGrid.InsertRow(expense);
    }

    private void OnUpdateRowExpense(Expense expense)
    {
    //TODO Научиться правильно пределять объект
        foreach (Expense item in expenses)
        {
            if (item.Id == expense.Id)
            {
                item.Name = expense.Name;
                item.Price = expense.Price;
            }
        }
    }

    private void OnCreateRowExpense(Expense expense)
    {
        expenses.Add(expense);
    }

    private void EditRowExpense(Expense expense)
    {
        expensesGrid.EditRow(expense);
    }

    private void SaveRowExpense(Expense expense)
    {
        expensesGrid.UpdateRow(expense);
    }

    private void CancelEditExpense(Expense expense)
    {
        expensesGrid.CancelEditRow(expense);
    }

    private void DeleteRowExpense(Expense expense)
    {
    //TODO Научиться правильно пределять объект
        if (expenses.Contains(expense))
        {
            expenses.Remove(expense);
            expensesGrid.Reload();
        }
        else
        {
            expensesGrid.CancelEditRow(expense);
        }
    }
}
