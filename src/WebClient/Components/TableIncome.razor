<h4>Доходы</h4>

<RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px" Text="Добавить" Click="@InsertRowIncome" />
<RadzenGrid @ref="incomesGrid" AllowFiltering="false" AllowPaging="true" PageSize="4" AllowSorting="true" EditMode="DataGridEditMode.Single"
             Data="@incomes" TItem="Income" RowUpdate="@OnUpdateRowIncome" RowCreate="@OnCreateRowIncome">
    <Columns>
        <RadzenGridColumn Width="100px" TItem="Income" Property="Id" Title="Id" />
        <RadzenGridColumn Width="200px" TItem="Income" Property="Name" Title="Название">
            <EditTemplate Context="income">
                <RadzenTextBox @bind-Value="income.Name" Style="width:100%; display: block" Name="Название" />
                <RadzenRequiredValidator Text="Обязательно к заполнению" Component="Название" Popup="true" />
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Width="100px" TItem="Income" Property="Price" Title="Цена">
            <Template Context="income">
                @string.Format(new System.Globalization.CultureInfo("ru-RU"), "{0:C}", income.Price)
            </Template>
            <FooterTemplate>
                <b>@string.Format(new System.Globalization.CultureInfo("ru-RU"), "{0:C}", incomes.Sum(o => o.Price))</b>
            </FooterTemplate>
            <EditTemplate Context="income">
                <RadzenNumeric @bind-Value="income.Price" Style="width:100%" />
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn Width="100px" TItem="Income" Context="sampleBlazorModelsSampleOrder" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
            <Template Context="income">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRowIncome(income))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="income">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRowIncome(income))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEditIncome(income))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Income" Context="order" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="income">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRowIncome(income))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="income">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRowIncome(income))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

@code {
    public class Income
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public float Price { get; set; }
    }
    private RadzenGrid<Income> incomesGrid;
    private List<Income> incomes = new List<Income>
    {
        new Income{Id = 1, Name = "Test1", Price = 5421},
        new Income{Id = 2, Name = "Test2", Price = 13465},
        new Income{Id = 3, Name = "Test3", Price = 12545},
        new Income{Id = 4, Name = "Test4", Price = 135465},
        new Income{Id = 5, Name = "Test5", Price = 135457},
        new Income{Id = 6, Name = "Test6", Price = 1354687},
    };
    private void InsertRowIncome()
    {
        var income = new Income();
        var id = (incomes.OrderByDescending(x => x.Id).First()?.Id ?? 0) + 1;
        income.Id = id;
        incomesGrid.InsertRow(income);
    }

    private void OnUpdateRowIncome(Income income)
    {
    //TODO Научиться правильно пределять объект
        foreach (Income item in incomes)
        {
            if (item.Id == income.Id)
            {
                item.Name = income.Name;
                item.Price = income.Price;
            }
        }
    }

    private void OnCreateRowIncome(Income income)
    {
        incomes.Add(income);
    }

    private void EditRowIncome(Income income)
    {
        incomesGrid.EditRow(income);
    }

    private void SaveRowIncome(Income income)
    {
        incomesGrid.UpdateRow(income);
    }

    private void CancelEditIncome(Income income)
    {
        incomesGrid.CancelEditRow(income);
    }

    private void DeleteRowIncome(Income income)
    {
    //TODO Научиться правильно пределять объект
        if (incomes.Contains(income))
        {
            incomes.Remove(income);
            incomesGrid.Reload();
        }
        else
        {
            incomesGrid.CancelEditRow(income);
        }
    }
}